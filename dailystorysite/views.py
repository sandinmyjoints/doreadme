from datetime import datetime
from contact_form.views import ContactFormView
from contact_form.forms import BasicContactForm
from django.core.urlresolvers import reverse
from django.http import HttpResponse, Http404
from django.views.generic.base import TemplateView
from django.views.generic.dates import TodayArchiveView, MonthMixin, YearMixin
from django.utils import simplejson as json

from day.models import Day


class AboutView(TemplateView):
    template_name = "dailystorysite/about.html"

    def get_context_data(self, **kwargs):
        context = super(AboutView, self).get_context_data(**kwargs)
        context["today"] = datetime.today()
        return context


class NewsView(TemplateView):
    template_name = "dailystorysite/news.html"


class SimpleResponse(object):
    """
    The simplest form of our ajax response. With SimpleResponse we are able to set a message that the calling javascript will display on success or
    failure. The 'data' property will be used to hold possible errors generated by the form validation.
    """
    def __init__(self, error=False, message=None):
        self.error = error
        self.message = message
        self.data = {}

    def setError(self, message):
        self.error = True
        self.message = message

    def setSuccess(self, message):
        self.error = False
        self.message = message

    def setData(self, data=None):
        self.data = data.copy() if data else {}

    def json(self):
        return json.dumps({'error': self.error,
                'message': self.message,
                'data':self.data
        })

    def as_dict(self):
        return {'error': self.error,
                'message': self.message,
                'data':self.data
        }

class JSONResponseMixin(object):
    def render_to_response(self, context):
        """Returns a JSON response containing 'context' as payload"""
        return self.get_json_response(self.convert_context_to_json(context))

    def get_json_response(self, content, **httpresponse_kwargs):
        """Construct an `HttpResponse` object."""
        return HttpResponse(content,
            content_type='application/json',
            **httpresponse_kwargs)

    def convert_context_to_json(self, context):
        """Convert the context dictionary into a JSON object"""
        # Note: This is *EXTREMELY* naive; in reality, you'll need
        # to do much more complex handling to ensure that arbitrary
        # objects -- such as Django model instances or querysets
        # -- can be serialized as JSON.
        return json.dumps(context)


class DailyStoryContactFormView(ContactFormView, JSONResponseMixin):
    template_name = "contact_form/contact_form.html"
    form_class = BasicContactForm

    def form_valid(self, form):
        if self.request.is_ajax():
            response = SimpleResponse()
            response.setSuccess("Thanks for sending!")
            super(DailyStoryContactFormView, self).form_valid(form)  # send the email, but we don't care about the response from this
            return JSONResponseMixin.render_to_response(self, response.as_dict())
        else:
            return super(DailyStoryContactFormView, self).form_valid(form)

    def form_invalid(self, form, **kwargs):
        if self.request.is_ajax():
            response = SimpleResponse()
            response.setError("Validation failed")
            response.setData(form.errors)
            return JSONResponseMixin.render_to_response(self, response.as_dict())
        else:
            return super(DailyStoryContactFormView, self).form_invalid(form, **kwargs)

    # This shouldn't be hit by ajax at all, only when a non-js user clicks on the link to load the full page
    def get(self, request, *args, **kwargs):
        if request.is_ajax():
            raise Http404
        else:
            return super(DailyStoryContactFormView, self).get(request, *args, **kwargs)

    def get_success_url(self):
        return reverse("contact_form_completed")

    # will this still be necessary if post can populate response correctly? probably not
#    def get_context_data(self, **kwargs):
#        context = super(DailyStoryContactFormView, self).get_context_data(**kwargs)
#        if "form" in kwargs.keys():
#            form = kwargs["form"]
#            context["success"] = not form.errors
#
#        return context



class DailyStoryTodayArchiveView(TodayArchiveView):
    model = Day
    context_object_name="day_list"
    template_name= 'dailystorysite/index.html'
    date_field = "day"

#    def get_context_data(self, **kwargs):
#        context = super(DailyStoryTodayArchiveView, self).get_context_data(**kwargs)
#        context['nice_month'] = datetime.strftime(datetime.today(), "%B")
#        context['today'] = datetime.today()
#        return context


class SiteHomePageView(DailyStoryTodayArchiveView):
    """
    Shows today's story.
    """

    def get(self, request, *args, **kwargs):
        self.date_list, self.object_list, extra_context = self.get_dated_items()
        context = self.get_context_data(object_list=self.object_list,
            date_list=self.date_list)
        context.update(extra_context)
        return self.render_to_response(context)



